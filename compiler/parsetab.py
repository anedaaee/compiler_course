
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'SLR'

_lr_signature = 'translation-unitleftLOGICAL_ORleftLOGICAL_ANDleftORleftANDnonassocASSIGNNOT_EQUALLESSLESS_EQUALGREATERGREATER_EQUALleftPLUSMINUSleftMULTIPLYDIVIDEAND AND_EQUAL ARROW ASSIGN AUTO BITWISE_NOT BREAK CASE CHAR CHARACTER COLON COMMA COMMENT CONST CONTINUE DECREMENT DEFAULT DIVIDE DIVIDE_EQUAL DO DOT DOUBLE ELLIPSIS ELSE EMPTY_STRING ENUM EQUAL EXTERN FALSE FLOAT FLOAT_NUMBER FOR GOTO GREATER GREATER_EQUAL IDENTIFIER IF INCREMENT INT INVALID LEFT_BRACE LEFT_BRACKET LEFT_PAREN LESS LESS_EQUAL LOGICAL_AND LOGICAL_OR LONG MINUS MINUS_EQUAL MODULO MODULO_EQUAL MULTIPLY MULTIPLY_EQUAL NOT NOT_EQUAL NUMBER OR OR_EQUAL PLUS PLUS_EQUAL QUESTION REGISTER RETURN RIGHT_BRACE RIGHT_BRACKET RIGHT_PAREN SEMICOLON SHIFT_L SHIFT_L_EQUAL SHIFT_R SHIFT_R_EQUAL SHORT SIGNED SIZEOF STATIC STRING STRUCT SWITCH TRUE TYPEDEF UNION UNSIGNED VOID VOLATILE WHILE XOR XOR_EQUALtranslation-unit : external-declaration-listexternal-declaration-list : external-declaration external-declaration-list\n                                 | lambdaexternal-declaration : function-definitionfunction-definition :  declaration-specifier-list direct-declarator declaration-list compound-statement declaration-specifier-list : declaration-specifier declaration-specifier-list\n                                  | lambdadeclaration-list : declaration declaration-list\n                        | lambdadeclaration-specifier : storage-class-specifier\n                              | type-specifier\n                              | type-qualifierstorage-class-specifier : AUTO\n                               | REGISTER\n                               | STATIC\n                               | EXTERN\n                               | TYPEDEF type-specifier : VOID\n                      | FLOAT\n                      | CHAR\n                      | INT\n                      | DOUBLE\n                      | struct-or-union-specifier\n                      struct-or-union-specifier : struct-or-union IDENTIFIER LEFT_BRACE struct-declaration struct-declaration-list RIGHT_BRACE\n                                 | struct-or-union LEFT_BRACE struct-declaration struct-declaration-list RIGHT_BRACE\n                                 | struct-or-union IDENTIFIER struct-declaration-list : specifier-qualifier-list struct-declaration-list\n                               | lambdastruct-or-union : STRUCT\n                       | UNIONstruct-declaration : specifier-qualifier-list struct-declarator-liststruct-declarator-list : struct-declarator\n                              | struct-declarator-list COMMA struct-declarator struct-declarator : direct-declarator\n                          | direct-declarator COLON constant-expression\n                          | COLON constant-expression specifier-qualifier-list : specifier-qualifier specifier-qualifier-list\n                                | lambdaspecifier-qualifier : type-specifier\n                            | type-qualifiertype-qualifier : CONST\n                      | VOLATILEdirect-declarator : IDENTIFIER\n                         | LEFT_PAREN direct-declarator RIGHT_PAREN\n                         | direct-declarator LEFT_BRACKET constant-expression-list RIGHT_BRACKET\n                         | direct-declarator LEFT_PAREN parameter-type-list RIGHT_PAREN\n                         | direct-declarator LEFT_PAREN identifier-list RIGHT_PARENidentifier-list : IDENTIFIER identifier-list\n                       | lambdaconstant-expression-list : constant-expression\n                                | lambdaconstant-expression : logical-or-expressionlogical-or-expression : logical-and-expression\n                             | logical-or-expression LOGICAL_OR logical-and-expressionlogical-and-expression : inclusive-or-expression\n                              | logical-and-expression LOGICAL_AND inclusive-or-expressioninclusive-or-expression : exclusive-or-expression\n                               | inclusive-or-expression OR exclusive-or-expression exclusive-or-expression : and-expression\n                               | exclusive-or-expression XOR and-expression and-expression : equality-expression\n                      | and-expression XOR equality-expressionequality-expression : relational-expression\n                           | equality-expression EQUAL relational-expression\n                           | equality-expression NOT_EQUAL relational-expressionrelational-expression : additive-expression\n                             | relational-expression LESS additive-expression\n                             | relational-expression GREATER additive-expression\n                             | relational-expression LESS_EQUAL additive-expression\n                             | relational-expression GREATER_EQUAL additive-expressionadditive-expression : multiplicative-expression\n                           | additive-expression PLUS multiplicative-expression\n                           | additive-expression MINUS multiplicative-expressionmultiplicative-expression : cast-expression\n                                 | multiplicative-expression MULTIPLY cast-expression\n                                 | multiplicative-expression DIVIDE cast-expression  cast-expression : unary-expression\n                       | LEFT_PAREN type-name RIGHT_PAREN cast-expressionunary-expression : postfix-expression\n                        | unary-operator cast-expression  postfix-expression : primary-expression\n                          | postfix-expression LEFT_BRACKET expression RIGHT_BRACKET\n                          | postfix-expression LEFT_PAREN assignment-expression-list RIGHT_PAREN\n                          | postfix-expression DOT IDENTIFIERassignment-expression-list : assignment-expression assignment-expression-list\n                                  | lambdaprimary-expression : IDENTIFIER\n                          | constant\n                          | STRING\n                          | LEFT_PAREN expression RIGHT_PAREN constant : NUMBER\n                | CHARACTER\n                | FLOAT_NUMBER expression : assignment-expression\n                  | expression COMMA assignment-expression assignment-expression : logical-or-expression\n                             | unary-expression ASSIGN assignment-expression unary-operator : LOGICAL_AND\n                      | MULTIPLY\n                      | PLUS\n                      | MINUS\n                      | BITWISE_NOT\n                      | NOTtype-name : specifier-qualifier specifier-qualifier-list direct-abstract-declarator-listdirect-abstract-declarator-list : direct-abstract-declarator\n                                       | lambdaparameter-type-list : parameter-list\n                           | parameter-list COMMA ELLIPSISparameter-list : parameter-declaration\n                      | parameter-list COMMA parameter-declaration parameter-declaration : declaration-specifier declaration-specifier-list direct-declarator\n                             | declaration-specifier declaration-specifier-list direct-abstract-declarator\n                             | declaration-specifier declaration-specifier-list direct-abstract-declarator : LEFT_PAREN direct-abstract-declarator RIGHT_PAREN\n                                    | direct-abstract-declarator-list LEFT_BRACKET constant-expression-list RIGHT_BRACKET\n                                    | direct-abstract-declarator-list LEFT_PAREN parameter-type-list-1 RIGHT_PARENparameter-type-list-1 : parameter-type-list\n                                | lambdadeclaration : declaration-specifier declaration-specifier-list init-declarator-list SEMICOLONinit-declarator-list : init-declarator init-declarator-list\n                            | lambdainit-declarator : direct-declarator\n                       | direct-declarator ASSIGN initializer initializer : assignment-expression\n                   | LEFT_BRACE initializer-list RIGHT_BRACE\n                   | LEFT_BRACE initializer-list COMMA RIGHT_BRACEinitializer-list : initializer\n                        | initializer-list COMMA initializercompound-statement : LEFT_BRACE declaration-list  statement-list RIGHT_BRACEstatement-list : statement statement-list\n                      | lambdastatement : expression-statement\n                 | compound-statement\n                 | selection-statement\n                 | iteration-statement\n                 | jump-statementexpression-statement : expression SEMICOLON\n                            | SEMICOLONselection-statement : IF LEFT_PAREN expression RIGHT_PAREN statement\n                           | IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statementiteration-statement : WHILE LEFT_PAREN expression RIGHT_PAREN statementjump-statement : GOTO IDENTIFIER SEMICOLON\n                      | CONTINUE SEMICOLON\n                      | BREAK SEMICOLON\n                      | RETURN expression-list SEMICOLON expression-list : expression\n                       | lambdalambda : '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,7,27,28,34,36,37,38,40,42,43,45,49,50,84,87,89,91,93,100,120,125,132,134,144,158,177,181,188,197,212,218,219,],[-148,0,-1,-148,-3,-4,-148,-2,-148,-148,-148,-148,-148,-148,-148,-148,-148,-5,-148,-148,-148,-148,-148,-148,-148,-148,-148,-148,-148,-148,-148,-148,-148,-148,-129,-148,-148,-148,]),'IDENTIFIER':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,36,37,38,39,40,42,43,44,45,46,47,48,49,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,87,88,89,90,91,93,94,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,122,123,124,125,126,127,128,129,132,134,136,138,140,141,144,146,147,148,149,150,152,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,181,183,188,191,193,194,197,199,200,201,203,204,208,212,213,214,215,218,219,220,221,222,225,226,234,235,238,239,240,241,242,244,245,],[-148,-148,-7,-4,29,-148,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-41,-42,33,-29,-30,-148,-43,29,-6,-7,-26,-148,73,84,-148,-9,-148,-148,-148,29,-148,-38,-39,-40,-5,-148,-53,-55,-98,-57,-59,-61,-63,-66,-71,-100,-101,-74,-99,-77,73,-79,73,-81,-87,-102,-103,-88,-89,-91,-92,-93,84,-148,-8,29,-44,-148,-148,-38,73,-37,73,-45,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-148,-96,-77,73,73,183,-80,-46,-47,29,29,-122,-25,29,73,73,-132,-133,-134,-135,-136,-138,202,73,-54,-56,-58,-60,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,73,-90,73,-148,73,73,-84,29,-119,73,-24,-129,-137,73,73,-143,-144,-78,-148,-97,-82,-83,73,-148,-123,-124,73,-142,-145,73,73,-125,73,-139,-141,-126,73,-140,]),'LEFT_PAREN':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,87,88,89,90,91,93,94,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,122,123,124,125,127,128,129,132,134,136,138,140,141,144,146,147,148,149,150,152,153,154,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,181,183,186,187,188,189,190,191,193,194,197,199,200,201,203,204,208,210,211,212,213,214,215,217,218,219,220,221,222,225,226,227,234,235,236,237,238,239,240,241,242,244,245,],[-148,-148,-7,-4,30,-148,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-41,-42,37,-43,30,-6,-7,-26,-148,69,-148,-148,-9,-148,37,-148,-148,30,-148,-38,-39,-40,-5,-148,-53,-55,-98,-57,-59,-61,-63,-66,-71,-100,-101,-74,-99,-77,117,125,69,-81,-87,-102,-103,-88,-89,-91,-92,-93,-148,-148,-8,30,-44,-148,-148,-38,37,69,-37,117,-45,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,117,-148,-96,-77,117,117,-80,-46,-47,188,30,37,-25,30,69,117,-132,-133,-134,-135,-136,-138,200,201,117,-54,-56,-58,-60,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,69,-90,117,212,117,117,-84,37,-105,188,219,-106,-119,117,-24,-129,-137,117,117,-143,-144,-78,219,-105,212,-97,-82,-83,-105,69,-148,-123,-124,117,-142,-145,-114,117,117,-115,-116,-125,117,-139,-141,-126,117,-140,]),'LEFT_BRACE':([0,3,7,24,25,26,28,29,33,34,35,36,37,38,39,40,42,43,45,50,84,87,88,89,90,91,93,100,101,120,125,128,129,132,134,144,146,147,148,149,150,152,158,177,181,188,191,193,197,199,203,204,212,218,219,222,225,226,234,235,239,240,241,244,245,],[-148,-148,-148,34,-29,-30,-148,-43,42,-148,50,-148,-148,-148,-9,-148,-148,-148,-148,-148,-148,-148,-8,-148,-44,-148,-148,50,-45,-148,-148,-46,-47,-148,-148,50,-132,-133,-134,-135,-136,-138,-148,-148,-148,-148,-119,222,-129,-137,-143,-144,-148,-148,-148,222,-142,-145,50,50,222,-139,-141,50,-140,]),'RIGHT_BRACE':([0,3,7,16,17,18,19,20,21,22,23,28,29,33,34,36,37,38,39,40,42,43,45,46,47,48,50,54,55,56,58,59,60,61,62,63,66,68,70,72,73,76,77,78,79,80,84,87,88,89,90,91,92,93,94,95,96,97,99,100,101,120,122,123,125,127,128,129,132,134,137,138,139,142,143,144,145,146,147,148,149,150,152,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,177,181,183,188,191,194,195,196,197,198,199,203,204,208,212,213,214,215,218,219,221,225,226,232,233,238,239,240,241,242,243,245,],[-148,-148,-148,-18,-19,-20,-21,-22,-23,-41,-42,-148,-43,-26,-148,-148,-148,-148,-9,-148,-148,-148,-148,-38,-39,-40,-148,-52,-53,-55,-57,-59,-61,-63,-66,-71,-74,-77,-79,-81,-87,-88,-89,-91,-92,-93,-148,-148,-8,-148,-44,-148,138,-148,-28,-31,-32,-34,-37,-148,-45,-148,-96,-77,-148,-80,-46,-47,-148,-148,194,-25,-27,-36,197,-148,-131,-132,-133,-134,-135,-136,-138,-148,-54,-56,-58,-60,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,-90,-148,-148,-84,-148,-119,-24,-33,-35,-129,-130,-137,-143,-144,-78,-148,-97,-82,-83,-148,-148,-124,-142,-145,238,-127,-125,242,-139,-141,-126,-128,-140,]),'VOID':([0,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,28,29,33,34,36,37,38,40,42,43,45,46,47,48,49,50,54,55,56,58,59,60,61,62,63,66,68,69,70,72,73,76,77,78,79,80,84,87,89,90,91,93,94,95,96,97,99,100,101,117,120,123,125,127,128,129,130,132,134,138,142,144,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,177,181,183,188,191,194,195,196,197,208,212,214,215,218,219,],[16,16,-4,16,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-41,-42,16,-43,-26,16,-148,16,16,16,16,16,16,-38,-39,-40,-5,16,-52,-53,-55,-57,-59,-61,-63,-66,-71,-74,-77,16,-79,-81,-87,-88,-89,-91,-92,-93,-148,16,-148,-44,16,16,-38,-31,-32,-34,-37,-148,-45,16,16,-77,-148,-80,-46,-47,16,-148,-148,-25,-36,-148,-148,-54,-56,-58,-60,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,-90,-148,-148,-84,-148,-119,-24,-33,-35,-129,-78,-148,-82,-83,-148,16,]),'FLOAT':([0,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,28,29,33,34,36,37,38,40,42,43,45,46,47,48,49,50,54,55,56,58,59,60,61,62,63,66,68,69,70,72,73,76,77,78,79,80,84,87,89,90,91,93,94,95,96,97,99,100,101,117,120,123,125,127,128,129,130,132,134,138,142,144,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,177,181,183,188,191,194,195,196,197,208,212,214,215,218,219,],[17,17,-4,17,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-41,-42,17,-43,-26,17,-148,17,17,17,17,17,17,-38,-39,-40,-5,17,-52,-53,-55,-57,-59,-61,-63,-66,-71,-74,-77,17,-79,-81,-87,-88,-89,-91,-92,-93,-148,17,-148,-44,17,17,-38,-31,-32,-34,-37,-148,-45,17,17,-77,-148,-80,-46,-47,17,-148,-148,-25,-36,-148,-148,-54,-56,-58,-60,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,-90,-148,-148,-84,-148,-119,-24,-33,-35,-129,-78,-148,-82,-83,-148,17,]),'CHAR':([0,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,28,29,33,34,36,37,38,40,42,43,45,46,47,48,49,50,54,55,56,58,59,60,61,62,63,66,68,69,70,72,73,76,77,78,79,80,84,87,89,90,91,93,94,95,96,97,99,100,101,117,120,123,125,127,128,129,130,132,134,138,142,144,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,177,181,183,188,191,194,195,196,197,208,212,214,215,218,219,],[18,18,-4,18,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-41,-42,18,-43,-26,18,-148,18,18,18,18,18,18,-38,-39,-40,-5,18,-52,-53,-55,-57,-59,-61,-63,-66,-71,-74,-77,18,-79,-81,-87,-88,-89,-91,-92,-93,-148,18,-148,-44,18,18,-38,-31,-32,-34,-37,-148,-45,18,18,-77,-148,-80,-46,-47,18,-148,-148,-25,-36,-148,-148,-54,-56,-58,-60,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,-90,-148,-148,-84,-148,-119,-24,-33,-35,-129,-78,-148,-82,-83,-148,18,]),'INT':([0,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,28,29,33,34,36,37,38,40,42,43,45,46,47,48,49,50,54,55,56,58,59,60,61,62,63,66,68,69,70,72,73,76,77,78,79,80,84,87,89,90,91,93,94,95,96,97,99,100,101,117,120,123,125,127,128,129,130,132,134,138,142,144,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,177,181,183,188,191,194,195,196,197,208,212,214,215,218,219,],[19,19,-4,19,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-41,-42,19,-43,-26,19,-148,19,19,19,19,19,19,-38,-39,-40,-5,19,-52,-53,-55,-57,-59,-61,-63,-66,-71,-74,-77,19,-79,-81,-87,-88,-89,-91,-92,-93,-148,19,-148,-44,19,19,-38,-31,-32,-34,-37,-148,-45,19,19,-77,-148,-80,-46,-47,19,-148,-148,-25,-36,-148,-148,-54,-56,-58,-60,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,-90,-148,-148,-84,-148,-119,-24,-33,-35,-129,-78,-148,-82,-83,-148,19,]),'DOUBLE':([0,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,28,29,33,34,36,37,38,40,42,43,45,46,47,48,49,50,54,55,56,58,59,60,61,62,63,66,68,69,70,72,73,76,77,78,79,80,84,87,89,90,91,93,94,95,96,97,99,100,101,117,120,123,125,127,128,129,130,132,134,138,142,144,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,177,181,183,188,191,194,195,196,197,208,212,214,215,218,219,],[20,20,-4,20,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-41,-42,20,-43,-26,20,-148,20,20,20,20,20,20,-38,-39,-40,-5,20,-52,-53,-55,-57,-59,-61,-63,-66,-71,-74,-77,20,-79,-81,-87,-88,-89,-91,-92,-93,-148,20,-148,-44,20,20,-38,-31,-32,-34,-37,-148,-45,20,20,-77,-148,-80,-46,-47,20,-148,-148,-25,-36,-148,-148,-54,-56,-58,-60,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,-90,-148,-148,-84,-148,-119,-24,-33,-35,-129,-78,-148,-82,-83,-148,20,]),'CONST':([0,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,28,29,33,34,36,37,38,40,42,43,45,46,47,48,49,50,54,55,56,58,59,60,61,62,63,66,68,69,70,72,73,76,77,78,79,80,84,87,89,90,91,93,94,95,96,97,99,100,101,117,120,123,125,127,128,129,130,132,134,138,142,144,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,177,181,183,188,191,194,195,196,197,208,212,214,215,218,219,],[22,22,-4,22,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-41,-42,22,-43,-26,22,-148,22,22,22,22,22,22,-38,-39,-40,-5,22,-52,-53,-55,-57,-59,-61,-63,-66,-71,-74,-77,22,-79,-81,-87,-88,-89,-91,-92,-93,-148,22,-148,-44,22,22,-38,-31,-32,-34,-37,-148,-45,22,22,-77,-148,-80,-46,-47,22,-148,-148,-25,-36,-148,-148,-54,-56,-58,-60,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,-90,-148,-148,-84,-148,-119,-24,-33,-35,-129,-78,-148,-82,-83,-148,22,]),'VOLATILE':([0,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,28,29,33,34,36,37,38,40,42,43,45,46,47,48,49,50,54,55,56,58,59,60,61,62,63,66,68,69,70,72,73,76,77,78,79,80,84,87,89,90,91,93,94,95,96,97,99,100,101,117,120,123,125,127,128,129,130,132,134,138,142,144,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,177,181,183,188,191,194,195,196,197,208,212,214,215,218,219,],[23,23,-4,23,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-41,-42,23,-43,-26,23,-148,23,23,23,23,23,23,-38,-39,-40,-5,23,-52,-53,-55,-57,-59,-61,-63,-66,-71,-74,-77,23,-79,-81,-87,-88,-89,-91,-92,-93,-148,23,-148,-44,23,23,-38,-31,-32,-34,-37,-148,-45,23,23,-77,-148,-80,-46,-47,23,-148,-148,-25,-36,-148,-148,-54,-56,-58,-60,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,-90,-148,-148,-84,-148,-119,-24,-33,-35,-129,-78,-148,-82,-83,-148,23,]),'STRUCT':([0,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,28,29,33,34,36,37,38,40,42,43,45,46,47,48,49,50,54,55,56,58,59,60,61,62,63,66,68,69,70,72,73,76,77,78,79,80,84,87,89,90,91,93,94,95,96,97,99,100,101,117,120,123,125,127,128,129,130,132,134,138,142,144,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,177,181,183,188,191,194,195,196,197,208,212,214,215,218,219,],[25,25,-4,25,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-41,-42,25,-43,-26,25,-148,25,25,25,25,25,25,-38,-39,-40,-5,25,-52,-53,-55,-57,-59,-61,-63,-66,-71,-74,-77,25,-79,-81,-87,-88,-89,-91,-92,-93,-148,25,-148,-44,25,25,-38,-31,-32,-34,-37,-148,-45,25,25,-77,-148,-80,-46,-47,25,-148,-148,-25,-36,-148,-148,-54,-56,-58,-60,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,-90,-148,-148,-84,-148,-119,-24,-33,-35,-129,-78,-148,-82,-83,-148,25,]),'UNION':([0,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,28,29,33,34,36,37,38,40,42,43,45,46,47,48,49,50,54,55,56,58,59,60,61,62,63,66,68,69,70,72,73,76,77,78,79,80,84,87,89,90,91,93,94,95,96,97,99,100,101,117,120,123,125,127,128,129,130,132,134,138,142,144,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,177,181,183,188,191,194,195,196,197,208,212,214,215,218,219,],[26,26,-4,26,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-41,-42,26,-43,-26,26,-148,26,26,26,26,26,26,-38,-39,-40,-5,26,-52,-53,-55,-57,-59,-61,-63,-66,-71,-74,-77,26,-79,-81,-87,-88,-89,-91,-92,-93,-148,26,-148,-44,26,26,-38,-31,-32,-34,-37,-148,-45,26,26,-77,-148,-80,-46,-47,26,-148,-148,-25,-36,-148,-148,-54,-56,-58,-60,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,-90,-148,-148,-84,-148,-119,-24,-33,-35,-129,-78,-148,-82,-83,-148,26,]),'COLON':([0,3,7,16,17,18,19,20,21,22,23,28,29,33,34,36,37,38,40,42,43,44,45,46,47,48,50,84,87,89,90,91,93,94,97,99,100,101,120,125,128,129,132,134,138,140,144,158,177,181,188,194,212,218,219,],[-148,-148,-148,-18,-19,-20,-21,-22,-23,-41,-42,-148,-43,-26,-148,-148,-148,-148,-148,-148,-148,98,-148,-38,-39,-40,-148,-148,-148,-148,-44,-148,-148,-38,141,-37,-148,-45,-148,-148,-46,-47,-148,-148,-25,98,-148,-148,-148,-148,-148,-24,-148,-148,-148,]),'RIGHT_PAREN':([0,3,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,28,29,31,32,33,34,36,37,38,40,41,42,43,45,46,47,48,50,55,56,58,59,60,61,62,63,66,68,70,72,73,76,77,78,79,80,81,82,83,84,85,86,87,89,90,91,93,94,99,100,101,118,119,120,121,122,123,125,127,128,129,131,132,134,138,144,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,177,180,181,182,183,184,185,186,187,188,190,194,208,209,210,211,212,213,214,215,216,217,218,219,223,224,227,229,230,231,236,237,],[-148,-148,-7,-148,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-41,-42,-148,-43,-6,-7,-26,-148,-148,-148,-148,-148,90,-148,-148,-148,-38,-39,-40,-148,-53,-55,-57,-59,-61,-63,-66,-71,-74,-77,-79,-81,-87,-88,-89,-91,-92,-93,128,129,-107,-148,-49,-109,-148,-148,-44,-148,-148,-38,-37,-148,-45,174,175,-148,-94,-96,-77,-148,-80,-46,-47,-48,-113,-148,-25,-148,-148,-54,-56,-58,-60,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,-90,-148,215,-148,-86,-84,-108,-110,-111,-105,-148,-106,-24,-78,-95,-104,-105,-148,-97,-82,-83,-85,227,-148,-148,234,235,-114,237,-117,-118,-115,-116,]),'RIGHT_BRACKET':([0,3,7,28,34,36,37,38,40,42,43,45,50,51,52,53,54,55,56,58,59,60,61,62,63,66,68,70,72,73,76,77,78,79,80,84,87,89,91,93,100,120,121,122,123,125,127,132,134,144,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,177,179,181,183,188,208,209,212,213,214,215,218,219,228,],[-148,-148,-148,-148,-148,-148,-148,-148,-148,-148,-148,-148,-148,101,-50,-51,-52,-53,-55,-57,-59,-61,-63,-66,-71,-74,-77,-79,-81,-87,-88,-89,-91,-92,-93,-148,-148,-148,-148,-148,-148,-148,-94,-96,-77,-148,-80,-148,-148,-148,-148,-54,-56,-58,-60,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,-90,-148,214,-148,-84,-148,-78,-95,-148,-97,-82,-83,-148,-148,236,]),'SEMICOLON':([0,3,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,28,29,31,32,33,34,36,37,38,39,40,42,43,45,50,55,56,58,59,60,61,62,63,66,68,70,72,73,76,77,78,79,80,84,87,88,89,90,91,93,100,101,120,121,122,123,125,127,128,129,132,133,134,135,136,138,144,146,147,148,149,150,151,152,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,177,181,183,188,191,192,194,197,199,202,203,204,205,206,207,208,209,212,213,214,215,218,219,220,221,225,226,234,235,238,240,241,242,244,245,],[-148,-148,-7,-148,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-41,-42,-148,-43,-6,-7,-26,-148,-148,-148,-148,-9,-148,-148,-148,-148,-148,-53,-55,-57,-59,-61,-63,-66,-71,-74,-77,-79,-81,-87,-88,-89,-91,-92,-93,-148,-148,-8,-148,-44,-148,-148,152,-45,-148,-94,-96,-77,-148,-80,-46,-47,-148,191,-148,-121,-122,-25,152,-132,-133,-134,-135,-136,199,-138,203,204,-148,-54,-56,-58,-60,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,-90,-148,-148,-84,-148,-119,-120,-24,-129,-137,225,-143,-144,226,-146,-147,-78,-95,-148,-97,-82,-83,-148,-148,-123,-124,-142,-145,152,152,-125,-139,-141,-126,152,-140,]),'LEFT_BRACKET':([0,3,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,28,29,31,32,33,34,36,37,38,40,41,42,43,45,46,47,48,50,70,72,73,76,77,78,79,80,84,87,89,90,91,93,94,97,99,100,101,120,125,128,129,132,134,136,138,144,158,175,177,181,183,186,187,188,189,190,194,210,211,212,214,215,217,218,219,227,236,237,],[-148,-148,-7,-148,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-41,-42,36,-43,-6,-7,-26,-148,-148,-148,-148,-148,36,-148,-148,-148,-38,-39,-40,-148,124,-81,-87,-88,-89,-91,-92,-93,-148,-148,-148,-44,-148,-148,-38,36,-37,-148,-45,-148,-148,-46,-47,-148,-148,36,-25,-148,-148,-90,-148,-148,-84,36,-105,-148,218,-106,-24,218,-105,-148,-82,-83,-105,-148,-148,-114,-115,-116,]),'COMMA':([0,3,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,28,29,31,32,33,34,36,37,38,40,42,43,45,50,54,55,56,58,59,60,61,62,63,66,68,70,72,73,76,77,78,79,80,83,84,86,87,89,90,91,93,95,96,97,100,101,119,120,121,122,123,125,127,128,129,132,134,138,142,144,151,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,177,179,181,183,185,186,187,188,194,195,196,206,208,209,212,213,214,215,218,219,221,223,224,227,232,233,236,237,238,242,243,],[-148,-148,-7,-148,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-41,-42,-148,-43,-6,-7,-26,-148,-148,-148,-148,-148,-148,-148,-148,-148,-52,-53,-55,-57,-59,-61,-63,-66,-71,-74,-77,-79,-81,-87,-88,-89,-91,-92,-93,130,-148,-109,-148,-148,-44,-148,-148,140,-32,-34,-148,-45,176,-148,-94,-96,-77,-148,-80,-46,-47,-113,-148,-25,-36,-148,176,-148,-54,-56,-58,-60,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,-90,-148,176,-148,-84,-110,-111,-112,-148,-24,-33,-35,176,-78,-95,-148,-97,-82,-83,-148,-148,-124,176,176,-114,239,-127,-115,-116,-125,-126,-128,]),'IF':([0,3,7,28,34,36,37,38,39,40,42,43,45,50,84,87,88,89,91,93,100,120,125,132,134,144,146,147,148,149,150,152,158,177,181,188,191,197,199,203,204,212,218,219,225,226,234,235,240,241,244,245,],[-148,-148,-148,-148,-148,-148,-148,-148,-9,-148,-148,-148,-148,-148,-148,-148,-8,-148,-148,-148,153,-148,-148,-148,-148,153,-132,-133,-134,-135,-136,-138,-148,-148,-148,-148,-119,-129,-137,-143,-144,-148,-148,-148,-142,-145,153,153,-139,-141,153,-140,]),'WHILE':([0,3,7,28,34,36,37,38,39,40,42,43,45,50,84,87,88,89,91,93,100,120,125,132,134,144,146,147,148,149,150,152,158,177,181,188,191,197,199,203,204,212,218,219,225,226,234,235,240,241,244,245,],[-148,-148,-148,-148,-148,-148,-148,-148,-9,-148,-148,-148,-148,-148,-148,-148,-8,-148,-148,-148,154,-148,-148,-148,-148,154,-132,-133,-134,-135,-136,-138,-148,-148,-148,-148,-119,-129,-137,-143,-144,-148,-148,-148,-142,-145,154,154,-139,-141,154,-140,]),'GOTO':([0,3,7,28,34,36,37,38,39,40,42,43,45,50,84,87,88,89,91,93,100,120,125,132,134,144,146,147,148,149,150,152,158,177,181,188,191,197,199,203,204,212,218,219,225,226,234,235,240,241,244,245,],[-148,-148,-148,-148,-148,-148,-148,-148,-9,-148,-148,-148,-148,-148,-148,-148,-8,-148,-148,-148,155,-148,-148,-148,-148,155,-132,-133,-134,-135,-136,-138,-148,-148,-148,-148,-119,-129,-137,-143,-144,-148,-148,-148,-142,-145,155,155,-139,-141,155,-140,]),'CONTINUE':([0,3,7,28,34,36,37,38,39,40,42,43,45,50,84,87,88,89,91,93,100,120,125,132,134,144,146,147,148,149,150,152,158,177,181,188,191,197,199,203,204,212,218,219,225,226,234,235,240,241,244,245,],[-148,-148,-148,-148,-148,-148,-148,-148,-9,-148,-148,-148,-148,-148,-148,-148,-8,-148,-148,-148,156,-148,-148,-148,-148,156,-132,-133,-134,-135,-136,-138,-148,-148,-148,-148,-119,-129,-137,-143,-144,-148,-148,-148,-142,-145,156,156,-139,-141,156,-140,]),'BREAK':([0,3,7,28,34,36,37,38,39,40,42,43,45,50,84,87,88,89,91,93,100,120,125,132,134,144,146,147,148,149,150,152,158,177,181,188,191,197,199,203,204,212,218,219,225,226,234,235,240,241,244,245,],[-148,-148,-148,-148,-148,-148,-148,-148,-9,-148,-148,-148,-148,-148,-148,-148,-8,-148,-148,-148,157,-148,-148,-148,-148,157,-132,-133,-134,-135,-136,-138,-148,-148,-148,-148,-119,-129,-137,-143,-144,-148,-148,-148,-142,-145,157,157,-139,-141,157,-140,]),'RETURN':([0,3,7,28,34,36,37,38,39,40,42,43,45,50,84,87,88,89,91,93,100,120,125,132,134,144,146,147,148,149,150,152,158,177,181,188,191,197,199,203,204,212,218,219,225,226,234,235,240,241,244,245,],[-148,-148,-148,-148,-148,-148,-148,-148,-9,-148,-148,-148,-148,-148,-148,-148,-8,-148,-148,-148,158,-148,-148,-148,-148,158,-132,-133,-134,-135,-136,-138,-148,-148,-148,-148,-119,-129,-137,-143,-144,-148,-148,-148,-142,-145,158,158,-139,-141,158,-140,]),'LOGICAL_AND':([0,3,7,28,34,36,37,38,39,40,42,43,45,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,87,88,89,91,93,98,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,122,123,124,125,127,132,134,141,144,146,147,148,149,150,152,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,181,183,188,191,193,197,199,200,201,203,204,208,212,213,214,215,218,219,222,225,226,234,235,239,240,241,244,245,],[-148,-148,-148,-148,-148,57,-148,-148,-9,-148,-148,-148,-148,-148,103,-55,-98,-57,-59,-61,-63,-66,-71,-100,-101,-74,-99,-77,57,-79,57,-81,-87,-102,-103,-88,-89,-91,-92,-93,-148,-148,-8,-148,-148,-148,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-148,-96,-77,57,57,-80,-148,-148,57,57,-132,-133,-134,-135,-136,-138,57,103,-56,-58,-60,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,57,-90,57,-148,57,57,-84,-148,-119,57,-129,-137,57,57,-143,-144,-78,-148,-97,-82,-83,57,-148,57,-142,-145,57,57,57,-139,-141,57,-140,]),'MULTIPLY':([0,3,7,28,34,36,37,38,39,40,42,43,45,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,87,88,89,91,93,98,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,122,123,124,125,127,132,134,141,144,146,147,148,149,150,152,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,181,183,188,191,193,197,199,200,201,203,204,208,212,213,214,215,218,219,222,225,226,234,235,239,240,241,244,245,],[-148,-148,-148,-148,-148,67,-148,-148,-9,-148,-148,-148,-148,-148,-53,-55,-98,-57,-59,-61,-63,-66,115,-100,-101,-74,-99,-77,67,-79,67,-81,-87,-102,-103,-88,-89,-91,-92,-93,-148,-148,-8,-148,-148,-148,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-148,-96,-77,67,67,-80,-148,-148,67,67,-132,-133,-134,-135,-136,-138,67,-54,-56,-58,-60,-62,-64,-65,-67,-68,-69,-70,115,115,-75,-76,67,-90,67,-148,67,67,-84,-148,-119,67,-129,-137,67,67,-143,-144,-78,-148,-97,-82,-83,67,-148,67,-142,-145,67,67,67,-139,-141,67,-140,]),'PLUS':([0,3,7,28,34,36,37,38,39,40,42,43,45,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,87,88,89,91,93,98,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,122,123,124,125,127,132,134,141,144,146,147,148,149,150,152,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,181,183,188,191,193,197,199,200,201,203,204,208,212,213,214,215,218,219,222,225,226,234,235,239,240,241,244,245,],[-148,-148,-148,-148,-148,64,-148,-148,-9,-148,-148,-148,-148,-148,-53,-55,-98,-57,-59,-61,-63,113,-71,-100,-101,-74,-99,-77,64,-79,64,-81,-87,-102,-103,-88,-89,-91,-92,-93,-148,-148,-8,-148,-148,-148,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-148,-96,-77,64,64,-80,-148,-148,64,64,-132,-133,-134,-135,-136,-138,64,-54,-56,-58,-60,-62,-64,-65,113,113,113,113,-72,-73,-75,-76,64,-90,64,-148,64,64,-84,-148,-119,64,-129,-137,64,64,-143,-144,-78,-148,-97,-82,-83,64,-148,64,-142,-145,64,64,64,-139,-141,64,-140,]),'MINUS':([0,3,7,28,34,36,37,38,39,40,42,43,45,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,87,88,89,91,93,98,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,122,123,124,125,127,132,134,141,144,146,147,148,149,150,152,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,181,183,188,191,193,197,199,200,201,203,204,208,212,213,214,215,218,219,222,225,226,234,235,239,240,241,244,245,],[-148,-148,-148,-148,-148,65,-148,-148,-9,-148,-148,-148,-148,-148,-53,-55,-98,-57,-59,-61,-63,114,-71,-100,-101,-74,-99,-77,65,-79,65,-81,-87,-102,-103,-88,-89,-91,-92,-93,-148,-148,-8,-148,-148,-148,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-148,-96,-77,65,65,-80,-148,-148,65,65,-132,-133,-134,-135,-136,-138,65,-54,-56,-58,-60,-62,-64,-65,114,114,114,114,-72,-73,-75,-76,65,-90,65,-148,65,65,-84,-148,-119,65,-129,-137,65,65,-143,-144,-78,-148,-97,-82,-83,65,-148,65,-142,-145,65,65,65,-139,-141,65,-140,]),'BITWISE_NOT':([0,3,7,28,34,36,37,38,39,40,42,43,45,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,87,88,89,91,93,98,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,122,123,124,125,127,132,134,141,144,146,147,148,149,150,152,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,181,183,188,191,193,197,199,200,201,203,204,208,212,213,214,215,218,219,222,225,226,234,235,239,240,241,244,245,],[-148,-148,-148,-148,-148,74,-148,-148,-9,-148,-148,-148,-148,-148,-53,-55,-98,-57,-59,-61,-63,-66,-71,-100,-101,-74,-99,-77,74,-79,74,-81,-87,-102,-103,-88,-89,-91,-92,-93,-148,-148,-8,-148,-148,-148,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-148,-96,-77,74,74,-80,-148,-148,74,74,-132,-133,-134,-135,-136,-138,74,-54,-56,-58,-60,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,74,-90,74,-148,74,74,-84,-148,-119,74,-129,-137,74,74,-143,-144,-78,-148,-97,-82,-83,74,-148,74,-142,-145,74,74,74,-139,-141,74,-140,]),'NOT':([0,3,7,28,34,36,37,38,39,40,42,43,45,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,87,88,89,91,93,98,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,122,123,124,125,127,132,134,141,144,146,147,148,149,150,152,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,181,183,188,191,193,197,199,200,201,203,204,208,212,213,214,215,218,219,222,225,226,234,235,239,240,241,244,245,],[-148,-148,-148,-148,-148,75,-148,-148,-9,-148,-148,-148,-148,-148,-53,-55,-98,-57,-59,-61,-63,-66,-71,-100,-101,-74,-99,-77,75,-79,75,-81,-87,-102,-103,-88,-89,-91,-92,-93,-148,-148,-8,-148,-148,-148,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-148,-96,-77,75,75,-80,-148,-148,75,75,-132,-133,-134,-135,-136,-138,75,-54,-56,-58,-60,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,75,-90,75,-148,75,75,-84,-148,-119,75,-129,-137,75,75,-143,-144,-78,-148,-97,-82,-83,75,-148,75,-142,-145,75,75,75,-139,-141,75,-140,]),'STRING':([0,3,7,28,34,36,37,38,39,40,42,43,45,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,87,88,89,91,93,98,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,122,123,124,125,127,132,134,141,144,146,147,148,149,150,152,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,181,183,188,191,193,197,199,200,201,203,204,208,212,213,214,215,218,219,222,225,226,234,235,239,240,241,244,245,],[-148,-148,-148,-148,-148,77,-148,-148,-9,-148,-148,-148,-148,-148,-53,-55,-98,-57,-59,-61,-63,-66,-71,-100,-101,-74,-99,-77,77,-79,77,-81,-87,-102,-103,-88,-89,-91,-92,-93,-148,-148,-8,-148,-148,-148,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-148,-96,-77,77,77,-80,-148,-148,77,77,-132,-133,-134,-135,-136,-138,77,-54,-56,-58,-60,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,77,-90,77,-148,77,77,-84,-148,-119,77,-129,-137,77,77,-143,-144,-78,-148,-97,-82,-83,77,-148,77,-142,-145,77,77,77,-139,-141,77,-140,]),'NUMBER':([0,3,7,28,34,36,37,38,39,40,42,43,45,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,87,88,89,91,93,98,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,122,123,124,125,127,132,134,141,144,146,147,148,149,150,152,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,181,183,188,191,193,197,199,200,201,203,204,208,212,213,214,215,218,219,222,225,226,234,235,239,240,241,244,245,],[-148,-148,-148,-148,-148,78,-148,-148,-9,-148,-148,-148,-148,-148,-53,-55,-98,-57,-59,-61,-63,-66,-71,-100,-101,-74,-99,-77,78,-79,78,-81,-87,-102,-103,-88,-89,-91,-92,-93,-148,-148,-8,-148,-148,-148,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-148,-96,-77,78,78,-80,-148,-148,78,78,-132,-133,-134,-135,-136,-138,78,-54,-56,-58,-60,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,78,-90,78,-148,78,78,-84,-148,-119,78,-129,-137,78,78,-143,-144,-78,-148,-97,-82,-83,78,-148,78,-142,-145,78,78,78,-139,-141,78,-140,]),'CHARACTER':([0,3,7,28,34,36,37,38,39,40,42,43,45,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,87,88,89,91,93,98,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,122,123,124,125,127,132,134,141,144,146,147,148,149,150,152,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,181,183,188,191,193,197,199,200,201,203,204,208,212,213,214,215,218,219,222,225,226,234,235,239,240,241,244,245,],[-148,-148,-148,-148,-148,79,-148,-148,-9,-148,-148,-148,-148,-148,-53,-55,-98,-57,-59,-61,-63,-66,-71,-100,-101,-74,-99,-77,79,-79,79,-81,-87,-102,-103,-88,-89,-91,-92,-93,-148,-148,-8,-148,-148,-148,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-148,-96,-77,79,79,-80,-148,-148,79,79,-132,-133,-134,-135,-136,-138,79,-54,-56,-58,-60,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,79,-90,79,-148,79,79,-84,-148,-119,79,-129,-137,79,79,-143,-144,-78,-148,-97,-82,-83,79,-148,79,-142,-145,79,79,79,-139,-141,79,-140,]),'FLOAT_NUMBER':([0,3,7,28,34,36,37,38,39,40,42,43,45,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,87,88,89,91,93,98,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,122,123,124,125,127,132,134,141,144,146,147,148,149,150,152,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,181,183,188,191,193,197,199,200,201,203,204,208,212,213,214,215,218,219,222,225,226,234,235,239,240,241,244,245,],[-148,-148,-148,-148,-148,80,-148,-148,-9,-148,-148,-148,-148,-148,-53,-55,-98,-57,-59,-61,-63,-66,-71,-100,-101,-74,-99,-77,80,-79,80,-81,-87,-102,-103,-88,-89,-91,-92,-93,-148,-148,-8,-148,-148,-148,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-148,-96,-77,80,80,-80,-148,-148,80,80,-132,-133,-134,-135,-136,-138,80,-54,-56,-58,-60,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,80,-90,80,-148,80,80,-84,-148,-119,80,-129,-137,80,80,-143,-144,-78,-148,-97,-82,-83,80,-148,80,-142,-145,80,80,80,-139,-141,80,-140,]),'AUTO':([0,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,28,29,33,37,38,40,49,50,87,90,101,128,129,130,138,191,194,197,219,],[11,11,-4,11,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-41,-42,11,-43,-26,11,11,11,-5,11,11,-44,-45,-46,-47,11,-25,-119,-24,-129,11,]),'REGISTER':([0,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,28,29,33,37,38,40,49,50,87,90,101,128,129,130,138,191,194,197,219,],[12,12,-4,12,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-41,-42,12,-43,-26,12,12,12,-5,12,12,-44,-45,-46,-47,12,-25,-119,-24,-129,12,]),'STATIC':([0,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,28,29,33,37,38,40,49,50,87,90,101,128,129,130,138,191,194,197,219,],[13,13,-4,13,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-41,-42,13,-43,-26,13,13,13,-5,13,13,-44,-45,-46,-47,13,-25,-119,-24,-129,13,]),'EXTERN':([0,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,28,29,33,37,38,40,49,50,87,90,101,128,129,130,138,191,194,197,219,],[14,14,-4,14,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-41,-42,14,-43,-26,14,14,14,-5,14,14,-44,-45,-46,-47,14,-25,-119,-24,-129,14,]),'TYPEDEF':([0,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,28,29,33,37,38,40,49,50,87,90,101,128,129,130,138,191,194,197,219,],[15,15,-4,15,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-41,-42,15,-43,-26,15,15,15,-5,15,15,-44,-45,-46,-47,15,-25,-119,-24,-129,15,]),'ASSIGN':([29,68,70,72,73,76,77,78,79,80,90,101,123,127,128,129,136,175,183,208,214,215,],[-43,-77,-79,-81,-87,-88,-89,-91,-92,-93,-44,-45,178,-80,-46,-47,193,-90,-84,-78,-82,-83,]),'LOGICAL_OR':([54,55,56,58,59,60,61,62,63,66,68,70,72,73,76,77,78,79,80,122,123,127,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,183,208,214,215,],[102,-53,-55,-57,-59,-61,-63,-66,-71,-74,-77,-79,-81,-87,-88,-89,-91,-92,-93,102,-77,-80,-54,-56,-58,-60,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,-90,-84,-78,-82,-83,]),'OR':([56,58,59,60,61,62,63,66,68,70,72,73,76,77,78,79,80,123,127,160,161,162,163,164,165,166,167,168,169,170,171,172,173,175,183,208,214,215,],[104,-57,-59,-61,-63,-66,-71,-74,-77,-79,-81,-87,-88,-89,-91,-92,-93,-77,-80,104,-58,-60,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,-90,-84,-78,-82,-83,]),'XOR':([58,59,60,61,62,63,66,68,70,72,73,76,77,78,79,80,123,127,161,162,163,164,165,166,167,168,169,170,171,172,173,175,183,208,214,215,],[105,106,-61,-63,-66,-71,-74,-77,-79,-81,-87,-88,-89,-91,-92,-93,-77,-80,105,106,-62,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,-90,-84,-78,-82,-83,]),'EQUAL':([60,61,62,63,66,68,70,72,73,76,77,78,79,80,123,127,163,164,165,166,167,168,169,170,171,172,173,175,183,208,214,215,],[107,-63,-66,-71,-74,-77,-79,-81,-87,-88,-89,-91,-92,-93,-77,-80,107,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,-90,-84,-78,-82,-83,]),'NOT_EQUAL':([60,61,62,63,66,68,70,72,73,76,77,78,79,80,123,127,163,164,165,166,167,168,169,170,171,172,173,175,183,208,214,215,],[108,-63,-66,-71,-74,-77,-79,-81,-87,-88,-89,-91,-92,-93,-77,-80,108,-64,-65,-67,-68,-69,-70,-72,-73,-75,-76,-90,-84,-78,-82,-83,]),'LESS':([61,62,63,66,68,70,72,73,76,77,78,79,80,123,127,164,165,166,167,168,169,170,171,172,173,175,183,208,214,215,],[109,-66,-71,-74,-77,-79,-81,-87,-88,-89,-91,-92,-93,-77,-80,109,109,-67,-68,-69,-70,-72,-73,-75,-76,-90,-84,-78,-82,-83,]),'GREATER':([61,62,63,66,68,70,72,73,76,77,78,79,80,123,127,164,165,166,167,168,169,170,171,172,173,175,183,208,214,215,],[110,-66,-71,-74,-77,-79,-81,-87,-88,-89,-91,-92,-93,-77,-80,110,110,-67,-68,-69,-70,-72,-73,-75,-76,-90,-84,-78,-82,-83,]),'LESS_EQUAL':([61,62,63,66,68,70,72,73,76,77,78,79,80,123,127,164,165,166,167,168,169,170,171,172,173,175,183,208,214,215,],[111,-66,-71,-74,-77,-79,-81,-87,-88,-89,-91,-92,-93,-77,-80,111,111,-67,-68,-69,-70,-72,-73,-75,-76,-90,-84,-78,-82,-83,]),'GREATER_EQUAL':([61,62,63,66,68,70,72,73,76,77,78,79,80,123,127,164,165,166,167,168,169,170,171,172,173,175,183,208,214,215,],[112,-66,-71,-74,-77,-79,-81,-87,-88,-89,-91,-92,-93,-77,-80,112,112,-67,-68,-69,-70,-72,-73,-75,-76,-90,-84,-78,-82,-83,]),'DIVIDE':([63,66,68,70,72,73,76,77,78,79,80,123,127,170,171,172,173,175,183,208,214,215,],[116,-74,-77,-79,-81,-87,-88,-89,-91,-92,-93,-77,-80,116,116,-75,-76,-90,-84,-78,-82,-83,]),'DOT':([70,72,73,76,77,78,79,80,175,183,214,215,],[126,-81,-87,-88,-89,-91,-92,-93,-90,-84,-82,-83,]),'ELLIPSIS':([130,],[184,]),'ELSE':([146,147,148,149,150,152,197,199,203,204,225,226,240,241,245,],[-132,-133,-134,-135,-136,-138,-129,-137,-143,-144,-142,-145,244,-141,-140,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'translation-unit':([0,],[1,]),'external-declaration-list':([0,3,],[2,27,]),'external-declaration':([0,3,],[3,3,]),'lambda':([0,3,7,28,34,36,37,38,40,42,43,45,50,84,87,89,91,93,100,120,125,132,134,144,158,177,181,188,212,218,219,],[4,4,32,39,46,53,85,39,32,46,94,46,39,85,32,135,94,94,145,46,182,190,135,145,207,190,182,190,190,53,231,]),'function-definition':([0,3,],[5,5,]),'declaration-specifier-list':([0,3,7,40,87,],[6,6,31,89,132,]),'declaration-specifier':([0,3,7,28,37,38,40,50,87,130,219,],[7,7,7,40,87,40,7,40,7,87,87,]),'storage-class-specifier':([0,3,7,28,37,38,40,50,87,130,219,],[8,8,8,8,8,8,8,8,8,8,8,]),'type-specifier':([0,3,7,28,34,37,38,40,42,43,45,50,69,87,91,93,117,120,130,219,],[9,9,9,9,47,9,9,9,47,47,47,9,47,9,47,47,47,47,9,9,]),'type-qualifier':([0,3,7,28,34,37,38,40,42,43,45,50,69,87,91,93,117,120,130,219,],[10,10,10,10,48,10,10,10,48,48,48,10,48,10,48,48,48,48,10,10,]),'struct-or-union-specifier':([0,3,7,28,34,37,38,40,42,43,45,50,69,87,91,93,117,120,130,219,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'struct-or-union':([0,3,7,28,34,37,38,40,42,43,45,50,69,87,91,93,117,120,130,219,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'direct-declarator':([6,30,44,89,132,134,140,188,],[28,41,97,136,186,136,97,41,]),'declaration-list':([28,38,50,],[35,88,100,]),'declaration':([28,38,50,],[38,38,38,]),'struct-declaration':([34,42,],[43,91,]),'specifier-qualifier-list':([34,42,43,45,91,93,120,],[44,44,93,99,93,93,177,]),'specifier-qualifier':([34,42,43,45,69,91,93,117,120,],[45,45,45,45,120,45,45,120,45,]),'compound-statement':([35,100,144,234,235,244,],[49,147,147,147,147,147,]),'constant-expression-list':([36,218,],[51,228,]),'constant-expression':([36,98,141,218,],[52,142,196,52,]),'logical-or-expression':([36,69,98,100,117,124,125,141,144,158,176,178,181,193,200,201,218,222,234,235,239,244,],[54,122,54,122,122,122,122,54,122,122,122,122,122,122,122,122,54,122,122,122,122,122,]),'logical-and-expression':([36,69,98,100,102,117,124,125,141,144,158,176,178,181,193,200,201,218,222,234,235,239,244,],[55,55,55,55,159,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'inclusive-or-expression':([36,69,98,100,102,103,117,124,125,141,144,158,176,178,181,193,200,201,218,222,234,235,239,244,],[56,56,56,56,56,160,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'exclusive-or-expression':([36,69,98,100,102,103,104,117,124,125,141,144,158,176,178,181,193,200,201,218,222,234,235,239,244,],[58,58,58,58,58,58,161,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'and-expression':([36,69,98,100,102,103,104,105,117,124,125,141,144,158,176,178,181,193,200,201,218,222,234,235,239,244,],[59,59,59,59,59,59,59,162,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'equality-expression':([36,69,98,100,102,103,104,105,106,117,124,125,141,144,158,176,178,181,193,200,201,218,222,234,235,239,244,],[60,60,60,60,60,60,60,60,163,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'relational-expression':([36,69,98,100,102,103,104,105,106,107,108,117,124,125,141,144,158,176,178,181,193,200,201,218,222,234,235,239,244,],[61,61,61,61,61,61,61,61,61,164,165,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'additive-expression':([36,69,98,100,102,103,104,105,106,107,108,109,110,111,112,117,124,125,141,144,158,176,178,181,193,200,201,218,222,234,235,239,244,],[62,62,62,62,62,62,62,62,62,62,62,166,167,168,169,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'multiplicative-expression':([36,69,98,100,102,103,104,105,106,107,108,109,110,111,112,113,114,117,124,125,141,144,158,176,178,181,193,200,201,218,222,234,235,239,244,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,170,171,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'cast-expression':([36,69,71,98,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,124,125,141,144,158,174,176,178,181,193,200,201,218,222,234,235,239,244,],[66,66,127,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,172,173,66,66,66,66,66,66,208,66,66,66,66,66,66,66,66,66,66,66,66,]),'unary-expression':([36,69,71,98,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,124,125,141,144,158,174,176,178,181,193,200,201,218,222,234,235,239,244,],[68,123,68,68,123,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,123,123,123,68,123,123,68,123,123,123,123,123,123,68,123,123,123,123,123,]),'postfix-expression':([36,69,71,98,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,124,125,141,144,158,174,176,178,181,193,200,201,218,222,234,235,239,244,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'unary-operator':([36,69,71,98,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,124,125,141,144,158,174,176,178,181,193,200,201,218,222,234,235,239,244,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'primary-expression':([36,69,71,98,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,124,125,141,144,158,174,176,178,181,193,200,201,218,222,234,235,239,244,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'constant':([36,69,71,98,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,124,125,141,144,158,174,176,178,181,193,200,201,218,222,234,235,239,244,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'parameter-type-list':([37,219,],[81,230,]),'identifier-list':([37,84,],[82,131,]),'parameter-list':([37,219,],[83,83,]),'parameter-declaration':([37,130,219,],[86,185,86,]),'struct-declaration-list':([43,91,93,],[92,137,139,]),'struct-declarator-list':([44,],[95,]),'struct-declarator':([44,140,],[96,195,]),'type-name':([69,117,],[118,118,]),'expression':([69,100,117,124,144,158,200,201,234,235,244,],[119,151,119,179,151,206,223,224,151,151,151,]),'assignment-expression':([69,100,117,124,125,144,158,176,178,181,193,200,201,222,234,235,239,244,],[121,121,121,121,181,121,121,209,213,181,221,121,121,221,121,121,221,121,]),'init-declarator-list':([89,134,],[133,192,]),'init-declarator':([89,134,],[134,134,]),'statement-list':([100,144,],[143,198,]),'statement':([100,144,234,235,244,],[144,144,240,241,245,]),'expression-statement':([100,144,234,235,244,],[146,146,146,146,146,]),'selection-statement':([100,144,234,235,244,],[148,148,148,148,148,]),'iteration-statement':([100,144,234,235,244,],[149,149,149,149,149,]),'jump-statement':([100,144,234,235,244,],[150,150,150,150,150,]),'assignment-expression-list':([125,181,],[180,216,]),'direct-abstract-declarator':([132,177,188,212,],[187,211,217,217,]),'direct-abstract-declarator-list':([132,177,188,212,],[189,210,189,189,]),'expression-list':([158,],[205,]),'initializer':([193,222,239,],[220,233,243,]),'parameter-type-list-1':([219,],[229,]),'initializer-list':([222,],[232,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation-unit","S'",1,None,None,None),
  ('translation-unit -> external-declaration-list','translation-unit',1,'p_translation_unit','parser3.py',13),
  ('external-declaration-list -> external-declaration external-declaration-list','external-declaration-list',2,'p_external_declaration_list','parser3.py',18),
  ('external-declaration-list -> lambda','external-declaration-list',1,'p_external_declaration_list','parser3.py',19),
  ('external-declaration -> function-definition','external-declaration',1,'p_external_declaration','parser3.py',27),
  ('function-definition -> declaration-specifier-list direct-declarator declaration-list compound-statement','function-definition',4,'p_function_definition','parser3.py',32),
  ('declaration-specifier-list -> declaration-specifier declaration-specifier-list','declaration-specifier-list',2,'p_declaration_specifier_list','parser3.py',37),
  ('declaration-specifier-list -> lambda','declaration-specifier-list',1,'p_declaration_specifier_list','parser3.py',38),
  ('declaration-list -> declaration declaration-list','declaration-list',2,'p_declaration_list','parser3.py',46),
  ('declaration-list -> lambda','declaration-list',1,'p_declaration_list','parser3.py',47),
  ('declaration-specifier -> storage-class-specifier','declaration-specifier',1,'p_declaration_specifier','parser3.py',55),
  ('declaration-specifier -> type-specifier','declaration-specifier',1,'p_declaration_specifier','parser3.py',56),
  ('declaration-specifier -> type-qualifier','declaration-specifier',1,'p_declaration_specifier','parser3.py',57),
  ('storage-class-specifier -> AUTO','storage-class-specifier',1,'p_storage_class_specifier','parser3.py',62),
  ('storage-class-specifier -> REGISTER','storage-class-specifier',1,'p_storage_class_specifier','parser3.py',63),
  ('storage-class-specifier -> STATIC','storage-class-specifier',1,'p_storage_class_specifier','parser3.py',64),
  ('storage-class-specifier -> EXTERN','storage-class-specifier',1,'p_storage_class_specifier','parser3.py',65),
  ('storage-class-specifier -> TYPEDEF','storage-class-specifier',1,'p_storage_class_specifier','parser3.py',66),
  ('type-specifier -> VOID','type-specifier',1,'p_type_specifier','parser3.py',71),
  ('type-specifier -> FLOAT','type-specifier',1,'p_type_specifier','parser3.py',72),
  ('type-specifier -> CHAR','type-specifier',1,'p_type_specifier','parser3.py',73),
  ('type-specifier -> INT','type-specifier',1,'p_type_specifier','parser3.py',74),
  ('type-specifier -> DOUBLE','type-specifier',1,'p_type_specifier','parser3.py',75),
  ('type-specifier -> struct-or-union-specifier','type-specifier',1,'p_type_specifier','parser3.py',76),
  ('struct-or-union-specifier -> struct-or-union IDENTIFIER LEFT_BRACE struct-declaration struct-declaration-list RIGHT_BRACE','struct-or-union-specifier',6,'p_struct_or_union_specifier','parser3.py',83),
  ('struct-or-union-specifier -> struct-or-union LEFT_BRACE struct-declaration struct-declaration-list RIGHT_BRACE','struct-or-union-specifier',5,'p_struct_or_union_specifier','parser3.py',84),
  ('struct-or-union-specifier -> struct-or-union IDENTIFIER','struct-or-union-specifier',2,'p_struct_or_union_specifier','parser3.py',85),
  ('struct-declaration-list -> specifier-qualifier-list struct-declaration-list','struct-declaration-list',2,'p_struct_declaration_list','parser3.py',95),
  ('struct-declaration-list -> lambda','struct-declaration-list',1,'p_struct_declaration_list','parser3.py',96),
  ('struct-or-union -> STRUCT','struct-or-union',1,'p_struct_or_union','parser3.py',104),
  ('struct-or-union -> UNION','struct-or-union',1,'p_struct_or_union','parser3.py',105),
  ('struct-declaration -> specifier-qualifier-list struct-declarator-list','struct-declaration',2,'p_struct_declaration','parser3.py',110),
  ('struct-declarator-list -> struct-declarator','struct-declarator-list',1,'p_struct_declarator_list','parser3.py',115),
  ('struct-declarator-list -> struct-declarator-list COMMA struct-declarator','struct-declarator-list',3,'p_struct_declarator_list','parser3.py',116),
  ('struct-declarator -> direct-declarator','struct-declarator',1,'p_struct_declarator','parser3.py',124),
  ('struct-declarator -> direct-declarator COLON constant-expression','struct-declarator',3,'p_struct_declarator','parser3.py',125),
  ('struct-declarator -> COLON constant-expression','struct-declarator',2,'p_struct_declarator','parser3.py',126),
  ('specifier-qualifier-list -> specifier-qualifier specifier-qualifier-list','specifier-qualifier-list',2,'p_specifier_qualifier_list','parser3.py',136),
  ('specifier-qualifier-list -> lambda','specifier-qualifier-list',1,'p_specifier_qualifier_list','parser3.py',137),
  ('specifier-qualifier -> type-specifier','specifier-qualifier',1,'p_specifier_qualifier','parser3.py',145),
  ('specifier-qualifier -> type-qualifier','specifier-qualifier',1,'p_specifier_qualifier','parser3.py',146),
  ('type-qualifier -> CONST','type-qualifier',1,'p_type_qualifier','parser3.py',151),
  ('type-qualifier -> VOLATILE','type-qualifier',1,'p_type_qualifier','parser3.py',152),
  ('direct-declarator -> IDENTIFIER','direct-declarator',1,'p_direct_declarator','parser3.py',158),
  ('direct-declarator -> LEFT_PAREN direct-declarator RIGHT_PAREN','direct-declarator',3,'p_direct_declarator','parser3.py',159),
  ('direct-declarator -> direct-declarator LEFT_BRACKET constant-expression-list RIGHT_BRACKET','direct-declarator',4,'p_direct_declarator','parser3.py',160),
  ('direct-declarator -> direct-declarator LEFT_PAREN parameter-type-list RIGHT_PAREN','direct-declarator',4,'p_direct_declarator','parser3.py',161),
  ('direct-declarator -> direct-declarator LEFT_PAREN identifier-list RIGHT_PAREN','direct-declarator',4,'p_direct_declarator','parser3.py',162),
  ('identifier-list -> IDENTIFIER identifier-list','identifier-list',2,'p_identifier_list','parser3.py',172),
  ('identifier-list -> lambda','identifier-list',1,'p_identifier_list','parser3.py',173),
  ('constant-expression-list -> constant-expression','constant-expression-list',1,'p_constant_expression_list','parser3.py',181),
  ('constant-expression-list -> lambda','constant-expression-list',1,'p_constant_expression_list','parser3.py',182),
  ('constant-expression -> logical-or-expression','constant-expression',1,'p_constant_expression','parser3.py',188),
  ('logical-or-expression -> logical-and-expression','logical-or-expression',1,'p_logical_or_expression','parser3.py',193),
  ('logical-or-expression -> logical-or-expression LOGICAL_OR logical-and-expression','logical-or-expression',3,'p_logical_or_expression','parser3.py',194),
  ('logical-and-expression -> inclusive-or-expression','logical-and-expression',1,'p_logical_and_expression','parser3.py',202),
  ('logical-and-expression -> logical-and-expression LOGICAL_AND inclusive-or-expression','logical-and-expression',3,'p_logical_and_expression','parser3.py',203),
  ('inclusive-or-expression -> exclusive-or-expression','inclusive-or-expression',1,'p_inclusive_or_expression','parser3.py',211),
  ('inclusive-or-expression -> inclusive-or-expression OR exclusive-or-expression','inclusive-or-expression',3,'p_inclusive_or_expression','parser3.py',212),
  ('exclusive-or-expression -> and-expression','exclusive-or-expression',1,'p_exclusive_or_expression','parser3.py',220),
  ('exclusive-or-expression -> exclusive-or-expression XOR and-expression','exclusive-or-expression',3,'p_exclusive_or_expression','parser3.py',221),
  ('and-expression -> equality-expression','and-expression',1,'p_and_expression','parser3.py',229),
  ('and-expression -> and-expression XOR equality-expression','and-expression',3,'p_and_expression','parser3.py',230),
  ('equality-expression -> relational-expression','equality-expression',1,'p_equality_expression','parser3.py',238),
  ('equality-expression -> equality-expression EQUAL relational-expression','equality-expression',3,'p_equality_expression','parser3.py',239),
  ('equality-expression -> equality-expression NOT_EQUAL relational-expression','equality-expression',3,'p_equality_expression','parser3.py',240),
  ('relational-expression -> additive-expression','relational-expression',1,'p_relational_expression','parser3.py',248),
  ('relational-expression -> relational-expression LESS additive-expression','relational-expression',3,'p_relational_expression','parser3.py',249),
  ('relational-expression -> relational-expression GREATER additive-expression','relational-expression',3,'p_relational_expression','parser3.py',250),
  ('relational-expression -> relational-expression LESS_EQUAL additive-expression','relational-expression',3,'p_relational_expression','parser3.py',251),
  ('relational-expression -> relational-expression GREATER_EQUAL additive-expression','relational-expression',3,'p_relational_expression','parser3.py',252),
  ('additive-expression -> multiplicative-expression','additive-expression',1,'p_additive_expression','parser3.py',260),
  ('additive-expression -> additive-expression PLUS multiplicative-expression','additive-expression',3,'p_additive_expression','parser3.py',261),
  ('additive-expression -> additive-expression MINUS multiplicative-expression','additive-expression',3,'p_additive_expression','parser3.py',262),
  ('multiplicative-expression -> cast-expression','multiplicative-expression',1,'p_multiplicative_expression','parser3.py',270),
  ('multiplicative-expression -> multiplicative-expression MULTIPLY cast-expression','multiplicative-expression',3,'p_multiplicative_expression','parser3.py',271),
  ('multiplicative-expression -> multiplicative-expression DIVIDE cast-expression','multiplicative-expression',3,'p_multiplicative_expression','parser3.py',272),
  ('cast-expression -> unary-expression','cast-expression',1,'p_cast_expression','parser3.py',280),
  ('cast-expression -> LEFT_PAREN type-name RIGHT_PAREN cast-expression','cast-expression',4,'p_cast_expression','parser3.py',281),
  ('unary-expression -> postfix-expression','unary-expression',1,'p_unary_expression','parser3.py',288),
  ('unary-expression -> unary-operator cast-expression','unary-expression',2,'p_unary_expression','parser3.py',289),
  ('postfix-expression -> primary-expression','postfix-expression',1,'p_postfix_expression','parser3.py',297),
  ('postfix-expression -> postfix-expression LEFT_BRACKET expression RIGHT_BRACKET','postfix-expression',4,'p_postfix_expression','parser3.py',298),
  ('postfix-expression -> postfix-expression LEFT_PAREN assignment-expression-list RIGHT_PAREN','postfix-expression',4,'p_postfix_expression','parser3.py',299),
  ('postfix-expression -> postfix-expression DOT IDENTIFIER','postfix-expression',3,'p_postfix_expression','parser3.py',300),
  ('assignment-expression-list -> assignment-expression assignment-expression-list','assignment-expression-list',2,'p_assignment_expression_list','parser3.py',310),
  ('assignment-expression-list -> lambda','assignment-expression-list',1,'p_assignment_expression_list','parser3.py',311),
  ('primary-expression -> IDENTIFIER','primary-expression',1,'p_primary_expression','parser3.py',319),
  ('primary-expression -> constant','primary-expression',1,'p_primary_expression','parser3.py',320),
  ('primary-expression -> STRING','primary-expression',1,'p_primary_expression','parser3.py',321),
  ('primary-expression -> LEFT_PAREN expression RIGHT_PAREN','primary-expression',3,'p_primary_expression','parser3.py',322),
  ('constant -> NUMBER','constant',1,'p_constant','parser3.py',330),
  ('constant -> CHARACTER','constant',1,'p_constant','parser3.py',331),
  ('constant -> FLOAT_NUMBER','constant',1,'p_constant','parser3.py',332),
  ('expression -> assignment-expression','expression',1,'p_expression','parser3.py',337),
  ('expression -> expression COMMA assignment-expression','expression',3,'p_expression','parser3.py',338),
  ('assignment-expression -> logical-or-expression','assignment-expression',1,'p_assignment_expression','parser3.py',346),
  ('assignment-expression -> unary-expression ASSIGN assignment-expression','assignment-expression',3,'p_assignment_expression','parser3.py',347),
  ('unary-operator -> LOGICAL_AND','unary-operator',1,'p_unary_operator','parser3.py',355),
  ('unary-operator -> MULTIPLY','unary-operator',1,'p_unary_operator','parser3.py',356),
  ('unary-operator -> PLUS','unary-operator',1,'p_unary_operator','parser3.py',357),
  ('unary-operator -> MINUS','unary-operator',1,'p_unary_operator','parser3.py',358),
  ('unary-operator -> BITWISE_NOT','unary-operator',1,'p_unary_operator','parser3.py',359),
  ('unary-operator -> NOT','unary-operator',1,'p_unary_operator','parser3.py',360),
  ('type-name -> specifier-qualifier specifier-qualifier-list direct-abstract-declarator-list','type-name',3,'p_type_name','parser3.py',365),
  ('direct-abstract-declarator-list -> direct-abstract-declarator','direct-abstract-declarator-list',1,'p_direct_abstract_declarator_list','parser3.py',370),
  ('direct-abstract-declarator-list -> lambda','direct-abstract-declarator-list',1,'p_direct_abstract_declarator_list','parser3.py',371),
  ('parameter-type-list -> parameter-list','parameter-type-list',1,'p_parameter_type_list','parser3.py',377),
  ('parameter-type-list -> parameter-list COMMA ELLIPSIS','parameter-type-list',3,'p_parameter_type_list','parser3.py',378),
  ('parameter-list -> parameter-declaration','parameter-list',1,'p_parameter_list','parser3.py',386),
  ('parameter-list -> parameter-list COMMA parameter-declaration','parameter-list',3,'p_parameter_list','parser3.py',387),
  ('parameter-declaration -> declaration-specifier declaration-specifier-list direct-declarator','parameter-declaration',3,'p_parameter_declaration','parser3.py',393),
  ('parameter-declaration -> declaration-specifier declaration-specifier-list direct-abstract-declarator','parameter-declaration',3,'p_parameter_declaration','parser3.py',394),
  ('parameter-declaration -> declaration-specifier declaration-specifier-list','parameter-declaration',2,'p_parameter_declaration','parser3.py',395),
  ('direct-abstract-declarator -> LEFT_PAREN direct-abstract-declarator RIGHT_PAREN','direct-abstract-declarator',3,'p_direct_abstract_declarator','parser3.py',403),
  ('direct-abstract-declarator -> direct-abstract-declarator-list LEFT_BRACKET constant-expression-list RIGHT_BRACKET','direct-abstract-declarator',4,'p_direct_abstract_declarator','parser3.py',404),
  ('direct-abstract-declarator -> direct-abstract-declarator-list LEFT_PAREN parameter-type-list-1 RIGHT_PAREN','direct-abstract-declarator',4,'p_direct_abstract_declarator','parser3.py',405),
  ('parameter-type-list-1 -> parameter-type-list','parameter-type-list-1',1,'p_parameter_type_list_1','parser3.py',413),
  ('parameter-type-list-1 -> lambda','parameter-type-list-1',1,'p_parameter_type_list_1','parser3.py',414),
  ('declaration -> declaration-specifier declaration-specifier-list init-declarator-list SEMICOLON','declaration',4,'p_declaration','parser3.py',419),
  ('init-declarator-list -> init-declarator init-declarator-list','init-declarator-list',2,'p_init_declarator_list','parser3.py',424),
  ('init-declarator-list -> lambda','init-declarator-list',1,'p_init_declarator_list','parser3.py',425),
  ('init-declarator -> direct-declarator','init-declarator',1,'p_init_declarator','parser3.py',433),
  ('init-declarator -> direct-declarator ASSIGN initializer','init-declarator',3,'p_init_declarator','parser3.py',434),
  ('initializer -> assignment-expression','initializer',1,'p_initializer','parser3.py',442),
  ('initializer -> LEFT_BRACE initializer-list RIGHT_BRACE','initializer',3,'p_initializer','parser3.py',443),
  ('initializer -> LEFT_BRACE initializer-list COMMA RIGHT_BRACE','initializer',4,'p_initializer','parser3.py',444),
  ('initializer-list -> initializer','initializer-list',1,'p_initializer_list','parser3.py',454),
  ('initializer-list -> initializer-list COMMA initializer','initializer-list',3,'p_initializer_list','parser3.py',455),
  ('compound-statement -> LEFT_BRACE declaration-list statement-list RIGHT_BRACE','compound-statement',4,'p_compound_statement','parser3.py',463),
  ('statement-list -> statement statement-list','statement-list',2,'p_statement_list','parser3.py',468),
  ('statement-list -> lambda','statement-list',1,'p_statement_list','parser3.py',469),
  ('statement -> expression-statement','statement',1,'p_statement','parser3.py',477),
  ('statement -> compound-statement','statement',1,'p_statement','parser3.py',478),
  ('statement -> selection-statement','statement',1,'p_statement','parser3.py',479),
  ('statement -> iteration-statement','statement',1,'p_statement','parser3.py',480),
  ('statement -> jump-statement','statement',1,'p_statement','parser3.py',481),
  ('expression-statement -> expression SEMICOLON','expression-statement',2,'p_expression_statement','parser3.py',486),
  ('expression-statement -> SEMICOLON','expression-statement',1,'p_expression_statement','parser3.py',487),
  ('selection-statement -> IF LEFT_PAREN expression RIGHT_PAREN statement','selection-statement',5,'p_selection_statement','parser3.py',495),
  ('selection-statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement','selection-statement',7,'p_selection_statement','parser3.py',496),
  ('iteration-statement -> WHILE LEFT_PAREN expression RIGHT_PAREN statement','iteration-statement',5,'p_iteration_statement','parser3.py',504),
  ('jump-statement -> GOTO IDENTIFIER SEMICOLON','jump-statement',3,'p_jump_statement','parser3.py',509),
  ('jump-statement -> CONTINUE SEMICOLON','jump-statement',2,'p_jump_statement','parser3.py',510),
  ('jump-statement -> BREAK SEMICOLON','jump-statement',2,'p_jump_statement','parser3.py',511),
  ('jump-statement -> RETURN expression-list SEMICOLON','jump-statement',3,'p_jump_statement','parser3.py',512),
  ('expression-list -> expression','expression-list',1,'p_expression_list','parser3.py',522),
  ('expression-list -> lambda','expression-list',1,'p_expression_list','parser3.py',523),
  ('lambda -> <empty>','lambda',0,'p_lambda','parser3.py',528),
]
